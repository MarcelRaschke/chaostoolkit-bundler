name: Build and Tag

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:


jobs:
  tag-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: "${{secrets.CI_SSH_KEY}}"
          fetch-depth: '0'
          persist-credentials: true
      - name: Prepare Release
        env:
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
        run: |
          git config --global user.email "${GH_EMAIL}"
          git config --global user.name "${GH_USERNAME}"

          pip3 install -U --quiet --prefer-binary pip semver requests

          echo "Creating a new tag if needed"

          # keep track of any change in dependencies we must not carry around in the
          # next tag
          cp requirements-chaostoolkit.txt master-requirements-chaostoolkit.txt
          cp update-requirements.py master-update-requirements.py

          # moving to the latest tag (if one found)
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [[ $? == 0 ]]; then
              git checkout $latest_tag
          fi
          echo "Latest tag was: ${latest_tag}"

          cp master-update-requirements.py update-requirements.py
          python3 update-requirements.py

          if [[ -f "./has_changes.txt" ]]; then
              echo "Removing temporary files"
              rm has_changes.txt
              git stash
              git checkout update-requirements.py
              rm master-requirements-chaostoolkit.txt master-update-requirements.py

              # today's version (suffixed if more than one per-day)
              # potential race condition here when multiple concurrent builds
              # let's assume it won't happen very often and we can fix it manually
              # Simplicity...
              export CAL_VERSION=`python3 get-next-version.py`

              git checkout master

              # echo "Pushing the new version and set of dependencies"
              echo ${CAL_VERSION} > VERSION

              git status
              git add VERSION
              git add requirements-chaostoolkit.txt
              git commit -s -m "Prepare ${CAL_VERSION}"

              echo "Tagging release"
              changes=`cat requirements-chaostoolkit.txt`
              git tag -a ${CAL_VERSION} -m "$(printf "Release ${CAL_VERSION}\n\nContains:\n${changes}")"
              git push --follow-tags origin "${CAL_VERSION}"

              echo "Tag ${CAL_VERSION} pushed"
          #else
          #  echo "No changed since last release"
          fi
